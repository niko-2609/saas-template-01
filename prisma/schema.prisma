datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enum for AuthRole (USER, ADMIN)
enum AuthRole {
  USER
  ADMIN
}

model User {
  id            String   @id @default(uuid()) // Corresponds to UUID in SQL
  name          String?  // Corresponds to VARCHAR(255)
  email         String?  @unique
  emailVerified DateTime? // Corresponds to TIMESTAMPTZ
  image         String?  // Corresponds to TEXT
  role          AuthRole @default(USER) // Enum with default 'USER'
  username      String?  @unique
  phone         String?
  country       String?
  language      String?
  timezone      String?
  accounts      Account[] // One-to-many relationship with Account model
  payments      Payment[] // One-to-many relationship with Payment model
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  subscriptions Subscription[] // One-to-many relationship with Subscription model

  @@map("users") // Maps the model to the "users" table
}

model Account {
  id                 String   @id @default(cuid()) // Corresponds to UUID in SQL
  userId             String   // UUID of the related user
  type               String   // Corresponds to VARCHAR(255)
  provider           String   // Corresponds to VARCHAR(255)
  providerAccountId  String   // Corresponds to VARCHAR(255)
  refresh_token      String?  // Corresponds to TEXT
  access_token       String?  // Corresponds to TEXT
  expires_at         BigInt?  // Corresponds to BIGINT
  id_token           String?  // Corresponds to TEXT
  scope              String?  // Corresponds to TEXT
  session_state      String?  // Corresponds to TEXT
  token_type         String?  // Corresponds to TEXT
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Relationship to User

  @@map("accounts") // Maps the model to the "accounts" table
  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String   // Corresponds to TEXT
  expires    DateTime // Corresponds to TIMESTAMPTZ
  token      String   // Corresponds to TEXT
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
  @@map("verification_token") // Maps the model to the "verification_token" table
}


model Payment {
  id            String    @id @default(uuid()) // Corresponds to UUID in SQL
  paymentId     String    @unique              // Unique identifier for the payment (could correspond to Razorpay's payment_id)
  orderId       String?                         // Corresponds to the order_id
  userId        String                          // Foreign key referencing the User model
  planId        String                          // Identifier for the plan associated with the payment
  createdAt     DateTime   @default(now())

  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade) // Many-to-one relationship with User

  @@map("payments") // Maps the model to the "payments" table
}


model Subscription {
  id             Int       @id @default(autoincrement())
  userId         String       // Foreign key referencing the User model
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  status         String  
  subId          String 
  razorpaySubId  String 
  razorpayPayId  String

  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade) // Many-to-one relationship with User
  @@map("subscriptions") // Maps the model to the "subscriptions"
}
